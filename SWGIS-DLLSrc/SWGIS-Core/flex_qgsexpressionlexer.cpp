#line 2 "C:/QGIS/QGISBuild/src/core/flex_qgsexpressionlexer.cpp"

#line 4 "C:/QGIS/QGISBuild/src/core/flex_qgsexpressionlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE exp_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via exp_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void exp_restart (FILE *input_file ,yyscan_t yyscanner );
void exp__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE exp__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void exp__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void exp__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void exp_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void exp_pop_buffer_state (yyscan_t yyscanner );

static void exp_ensure_buffer_stack (yyscan_t yyscanner );
static void exp__load_buffer_state (yyscan_t yyscanner );
static void exp__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER exp__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE exp__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE exp__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE exp__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *exp_alloc (yy_size_t ,yyscan_t yyscanner );
void *exp_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void exp_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer exp__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        exp_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            exp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        exp_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            exp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define exp_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[250] =
    {   0,
        0,    0,    0,    0,   53,   51,   49,   49,   51,   51,
       51,   29,   51,   38,   26,   24,   39,   25,   51,   28,
       41,   14,    9,   15,   51,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   30,   51,   16,    3,
        3,    5,    3,    3,    3,    3,    3,    3,    4,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   49,   10,    0,   48,   45,   45,    0,
       43,    0,   50,   40,    1,   27,    0,   41,    0,   11,
       13,   12,   46,   47,   47,   47,    0,   40,   47,   47,

       47,   47,   31,   21,   47,   47,   47,    8,   47,   47,
       47,   23,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   45,   45,   45,   50,   50,    0,   40,   46,
        7,   47,   47,   37,   47,   47,    0,   47,    6,   47,
       47,   47,   47,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   44,    0,   40,   33,   36,   47,

       47,    0,   17,    0,   32,   35,   42,   34,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   42,   19,    0,    0,    0,    3,    3,    3,
        3,    3,   22,    0,    0,    3,    3,    3,    0,    0,
        3,    3,    0,   18,    3,    3,   20,    3,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    1,    1,   18,
       19,   20,    1,   21,   22,   23,   24,   25,   26,   27,
       23,   28,   29,   23,   30,   31,   23,   32,   33,   23,
       23,   34,   35,   36,   37,   23,   38,   39,   39,   23,
        1,   40,    1,   41,   42,    1,   43,   23,   44,   45,

       46,   47,   23,   48,   49,   23,   50,   51,   23,   52,
       53,   23,   23,   54,   55,   56,   57,   23,   58,   39,
       39,   23,    1,   59,    1,   60,    1,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61
    } ;

static yyconst YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    1,    1,    3,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    1,
        4
    } ;

static yyconst flex_uint16_t yy_base[264] =
    {   0,
        0,    0,   61,    0,  846,  901,  121,  124,  825,  833,
      747,  901,  120,  901,  901,  901,  901,  770,  738,  119,
      116,  117,  901,  700,    0,  100,    0,  112,  126,  122,
      115,  110,  116,  107,  120,  123,  901,  653,  901,    0,
      177,  180,  684,  182,  193,    0,  252,    0,  686,    0,
        0,  683,  678,  628,  241,  144,    0,  597,  292,  353,
      124,  237,  403,  238,  233,  387,  389,  391,  396,  234,
        0,  549,    0,  187,  901,  578,  562,    0,  235,  263,
      547,  532,  183,  401,  901,  901,  515,  414,  259,  901,
      901,  901,    0,    0,  147,  240,  514,  507,  397,  408,

      406,  409,    0,  459,  419,  415,  425,    0,  433,  427,
      439,  901,    0,  464,    0,  467,  482,  485,  545,  471,
      474,  193,  901,  504,  492,    0,  464,  495,  502,    0,
        0,    0,  605,  470,  488,  537,  460,  510,  538,  546,
      543,  547,  485,  598,  597,  596,  602,  491,  551,  599,
      609,    0,    0,  492,  453,  526,  901,  522,  455,    0,
        0,  596,  611,    0,  603,  609,  664,  614,  578,  612,
      630,  643,  638,  649,  651,  322,  672,    0,  660,  339,
      716,  646,  653,  654,  649,  706,  710,  707,  701,  711,
      713,  652,  720,  656,    0,  274,  266,    0,    0,  722,

      723,  717,    0,  775,    0,    0,    0,    0,  745,  262,
      257,  719,  722,  757,  759,  740,  748,  792,  749,  750,
      758,  760,    0,    0,  761,  767,  770,  775,  776,  777,
      783,  786,  901,  787,  790,    0,  793,  795,  799,  804,
      801,  806,  811,  901,  812,    0,  901,    0,  901,  858,
      171,  862,  141,  864,  868,  872,  876,  878,  882,  884,
      888,  892,  896
    } ;

static yyconst flex_int16_t yy_def[264] =
    {   0,
      249,    1,  249,    3,  249,  249,  249,  249,  249,  250,
      251,  249,  252,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  253,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  249,  249,  249,  255,
      255,  249,  255,  256,  249,  255,  257,  255,  249,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  249,  249,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
      255,  255,  255,  249,  249,  250,  249,  258,  258,  252,
      249,  252,  259,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  260,  254,  254,  254,  249,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  249,  255,  255,  255,  256,  255,  261,  261,  257,
      255,  257,  249,  262,  255,  255,  255,  255,  255,  255,
      255,  255,  263,   60,   60,   60,  255,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,  255,  258,  258,  258,  259,  249,  249,  249,  260,
      254,  254,  254,  254,  254,  254,  249,  254,  254,  254,
      254,  254,  254,  119,  119,  119,  262,  255,  255,  255,
      263,   60,   60,   60,   60,   60,   60,  255,   60,   60,
       60,   60,   60,   60,  258,  249,  249,  254,  254,  254,

      254,  249,  254,  249,  254,  254,  254,  254,  119,  255,
      255,   60,   60,   60,   60,  255,   60,  255,   60,   60,
       60,   60,  254,  254,  249,  249,  249,   60,   60,  255,
      255,  255,  249,  249,  249,  255,  255,  255,  249,  249,
      255,  255,  249,  249,  255,  255,  249,  255,    0,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249
    } ;

static yyconst flex_uint16_t yy_nxt[963] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   27,   29,   30,   27,   31,   27,
       32,   33,   34,   27,   27,   35,   27,   36,   27,    6,
       37,   27,   26,   28,   27,   29,   30,   27,   31,   27,
       32,   33,   34,   27,   27,   35,   27,   36,   38,   39,
       27,   40,   41,   42,   41,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   61,   63,   64,   61,   65,
       61,   66,   67,   68,   61,   61,   69,   61,   70,   61,

       40,   71,   61,   60,   62,   61,   63,   64,   61,   65,
       61,   66,   67,   68,   61,   61,   69,   61,   70,   72,
       73,   61,   74,   74,   74,   74,   74,   74,   81,   85,
       87,   95,   88,   96,   86,   90,   91,   97,  105,   97,
      108,   89,   98,  101,   93,  102,  103,  109,  106,  104,
      111,   95,  107,  110,   96,  134,   99,  100,  105,   82,
      108,   89,  130,  131,  101,  102,  103,  109,  106,  104,
      111,  161,  107,  110,   78,  134,   99,  100,  114,   74,
      114,   74,   74,   74,   76,  157,  157,  117,   74,   74,
       74,  161,   76,  113,  113,  249,  113,  113,  113,  113,

      113,  113,  113,   80,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  119,  113,  113,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  113,  113,  118,   80,  127,  154,  128,  136,  141,
      121,  151,   80,  142,  143,  134,  129,  144,  134,  134,
       97,   81,   97,  211,  162,  159,  155,  154,  211,  136,
      141,  151,  197,  142,  143,  134,  129,  144,  134,  134,
      197,  122,  113,  113,  162,  113,  113,  113,  113,  113,

      113,  113,   82,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  113,  113,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      113,  113,  133,  113,  113,  180,  113,  113,  113,  113,
      113,  113,  113,  174,  113,  113,  113,  113,  113,  134,
      113,  113,  113,  113,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  135,  134,  134,  134,  134,  134,
      134,  134,  113,  113,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  135,  134,  134,  134,  134,  134,
      134,  113,  113,  134,  137,  145,  137,   84,  134,  138,
      134,  146,  134,  149,  148,  147,  158,  134,   87,  150,
       88,  163,  164,  139,  140,  145,  165,  166,  134,   89,
      134,  146,  134,  149,  148,  147,  158,  134,  168,  150,
      169,  163,  164,  139,  140,  170,  165,  166,  171,   89,
      167,  167,  167,  172,  173,  114,   74,  114,  168,   76,
      169,  159,  117,   80,  154,  170,  180,   76,  171,  121,
      125,   80,  120,  172,  173,  113,  113,  116,  113,  113,
      113,  113,  113,  113,  113,  154,  113,  113,  113,  113,

      113,  134,  113,  113,  113,  113,  157,  178,  125,  127,
      122,  128,  182,  137,  156,  137,  134,  179,  180,  134,
      129,  134,  134,   98,  113,  113,  138,  195,  157,  157,
      159,   84,  182,  196,  249,  196,  134,  179,  197,  134,
      129,  134,  134,  113,  113,  113,  113,  195,  113,  113,
      113,  113,  113,  113,  113,   80,  113,  113,  113,  113,
      113,  134,  113,  113,  113,  113,  175,   76,  134,  134,
      185,  183,  184,  186,  134,  187,  192,  134,  134,  204,
      204,  204,  134,   77,  113,  113,  176,  175,  134,  134,
      185,  183,  184,  186,  134,  187,  192,  134,  134,  188,

      167,  188,  134,  113,  113,  113,  113,  152,  113,  113,
      113,  113,  113,  113,  113,  132,  113,  113,  113,  113,
      113,  198,  113,  113,  113,  113,  189,  134,  134,  134,
      134,  190,  191,  134,  194,  193,  199,  200,  201,  203,
      134,  198,  205,  126,  113,  113,  189,  134,  134,  134,
      134,  190,  191,  134,  194,  193,  199,  200,  201,  203,
      134,  206,  205,  113,  113,  167,  167,  167,  207,  208,
      174,  210,  174,  210,  157,  178,  211,  134,  212,  213,
      134,  206,  156,  220,  134,  134,  209,  222,  207,  208,
      174,  174,  174,  174,  125,  202,  124,  134,  212,  213,

      134,  123,  115,  220,  134,  134,  209,  222,  188,  167,
      188,  112,  218,  204,  218,  202,  113,  113,   92,  113,
      113,  113,  113,  113,  113,  113,  217,  113,  113,  113,
      113,  113,  134,  113,  113,  113,  113,  134,  216,  215,
      214,  134,  134,  219,  134,  221,  217,  223,  224,  225,
      134,  134,  134,  134,   84,  113,  113,  134,  216,  215,
      214,  134,  134,  219,  134,  221,  174,  223,  224,  225,
      134,  134,  230,  134,  113,  113,  204,  204,  204,  134,
      134,  134,  228,   83,  229,   79,  174,  174,  134,  134,
      134,  134,  230,  218,  204,  218,  233,  234,  235,  134,

      134,  134,  228,  226,  229,  227,  134,  134,  134,  134,
      134,  134,  236,  237,  238,  239,  233,  234,  235,  240,
      231,  241,  232,  226,  242,  227,  134,  134,  243,  244,
      245,  246,  236,  237,  238,  239,  247,  248,   77,  240,
      231,  241,  232,   75,  242,  249,  249,  249,  243,  244,
      245,  246,  249,  249,  249,  249,  247,  248,   76,   76,
       76,   76,   80,   80,   80,   80,   94,   94,  113,  249,
      113,  113,  116,  116,  116,  116,  120,  120,  120,  120,
      153,  153,  156,  156,  156,  156,  160,  160,  174,  249,
      174,  174,  177,  177,  177,  177,  181,  249,  181,  181,

        5,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249
    } ;

static yyconst flex_int16_t yy_chk[963] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    7,    7,    7,    8,    8,    8,   13,   20,
       21,   26,   21,   28,   20,   22,   22,   29,   32,   29,
       34,   21,   29,   30,  253,   31,   31,   35,   33,   31,
       36,   26,   33,   35,   28,   61,   29,   29,   32,   13,
       34,   21,   56,   56,   30,   31,   31,   35,   33,   31,
       36,   95,   33,   35,  251,   61,   29,   29,   41,   41,
       41,   42,   42,   42,   44,   83,   83,   44,   74,   74,
       74,   95,   44,   45,   45,  122,   45,   45,   45,   45,

       45,   45,   45,  122,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   47,   55,   79,   55,   62,   64,
       47,   70,   47,   65,   65,   70,   55,   65,   62,   64,
       89,   80,   89,  211,   96,   89,   79,   79,  210,   62,
       64,   70,  197,   65,   65,   70,   55,   65,   62,   64,
      196,   47,   59,   59,   96,   59,   59,   59,   59,   59,

       59,   59,   80,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   60,  180,   60,   60,   60,   60,
       60,   60,   60,  176,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   63,   66,   63,   84,   66,   63,
       67,   67,   68,   69,   68,   67,   84,   69,   88,   69,
       88,   99,  100,   63,   63,   66,  101,  102,   66,   88,
       67,   67,   68,   69,   68,   67,   84,   69,  105,   69,
      106,   99,  100,   63,   63,  107,  101,  102,  109,   88,
      104,  104,  104,  110,  111,  114,  114,  114,  105,  116,
      106,  159,  116,  120,  155,  107,  137,  116,  109,  120,
      127,  120,  121,  110,  111,  118,  118,  117,  118,  118,
      118,  118,  118,  118,  118,  155,  118,  118,  118,  118,

      118,  134,  118,  118,  118,  118,  124,  124,  125,  128,
      120,  128,  135,  129,  124,  129,  143,  125,  129,  135,
      128,  134,  148,   98,  118,  118,  138,  154,  156,  156,
       97,   87,  135,  158,   82,  158,  143,  125,  158,  135,
      128,  138,  148,  118,  118,  119,  119,  154,  119,  119,
      119,  119,  119,  119,  119,   81,  119,  119,  119,  119,
      119,  138,  119,  119,  119,  119,  119,   77,  136,  139,
      140,  136,  139,  141,  141,  142,  149,  140,  142,  169,
      169,  169,  149,   76,  119,  119,  119,  119,  136,  139,
      140,  136,  139,  141,  141,  142,  149,  140,  142,  144,

      144,  144,  149,  119,  119,  133,  133,   72,  133,  133,
      133,  133,  133,  133,  133,   58,  133,  133,  133,  133,
      133,  162,  133,  133,  133,  133,  145,  146,  145,  144,
      150,  146,  147,  147,  151,  150,  163,  165,  166,  168,
      151,  162,  170,   54,  133,  133,  145,  146,  145,  144,
      150,  146,  147,  147,  151,  150,  163,  165,  166,  168,
      151,  171,  170,  133,  133,  167,  167,  167,  172,  173,
      174,  179,  175,  179,  177,  177,  179,  182,  183,  184,
      185,  171,  177,  192,  183,  184,  175,  194,  172,  173,
      174,  174,  175,  175,   53,  167,   52,  182,  183,  184,

      185,   49,   43,  192,  183,  184,  175,  194,  188,  188,
      188,   38,  190,  190,  190,  167,  181,  181,   24,  181,
      181,  181,  181,  181,  181,  181,  189,  181,  181,  181,
      181,  181,  189,  181,  181,  181,  181,  186,  188,  187,
      186,  187,  190,  191,  191,  193,  189,  200,  201,  202,
      212,  193,  189,  213,   19,  181,  181,  186,  188,  187,
      186,  187,  190,  191,  191,  193,  209,  200,  201,  202,
      212,  193,  216,  213,  181,  181,  204,  204,  204,  217,
      219,  220,  214,   18,  215,   11,  209,  209,  214,  221,
      215,  222,  216,  218,  218,  218,  225,  226,  227,  217,

      219,  220,  214,  204,  215,  204,  228,  229,  214,  221,
      215,  222,  230,  231,  232,  234,  225,  226,  227,  235,
      218,  237,  218,  204,  238,  204,  228,  229,  239,  240,
      241,  242,  230,  231,  232,  234,  243,  245,   10,  235,
      218,  237,  218,    9,  238,    5,    0,    0,  239,  240,
      241,  242,    0,    0,    0,    0,  243,  245,  250,  250,
      250,  250,  252,  252,  252,  252,  254,  254,  255,    0,
      255,  255,  256,  256,  256,  256,  257,  257,  257,  257,
      258,  258,  259,  259,  259,  259,  260,  260,  261,    0,
      261,  261,  262,  262,  262,  262,  263,    0,  263,  263,

      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
/***************************************************************************
                          qgsexpressionlexer.ll
                          --------------------
    begin                : August 2011
    copyright            : (C) 2011 by Martin Dobias
    email                : wonder.sk at gmail dot com
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
// this makes flex generate lexer with context + init/destroy functions
// this makes Bison send exp_lex another argument to use instead of using the global variable yylval
// ensure that lexer will be 8-bit (and not just 7-bit)
#line 30 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"

#include <stdlib.h>  // atof()

#include "qgsexpression.h"
struct expression_parser_context;
#include "qgsexpressionparser.hpp"
#include <QLocale>

// if not defined, searches for isatty()
// which doesn't in MSVC compiler
#define YY_NEVER_INTERACTIVE 1

#ifndef YY_NO_UNPUT
#define YY_NO_UNPUT	// unused
#endif

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define B_OP(x) yylval->b_op = QgsExpression::x
#define U_OP(x) yylval->u_op = QgsExpression::x
#define TEXT                   yylval->text = new QString( QString::fromUtf8(yytext) );
#define TEXT_FILTER(filter_fn) yylval->text = new QString( filter_fn( QString::fromUtf8(yytext) ) );

static QString stripText(QString text)
{
  // strip single quotes on start,end
  text = text.mid( 1, text.length() - 2 );

  // make single "single quotes" from double "single quotes"
  text.replace( "''", "'" );

  // strip \n \' etc.
  int index = 0;
  while (( index = text.indexOf( '\\', index ) ) != -1 )
  {
    text.remove( index, 1 ); // delete backslash
    QChar chr;
    switch ( text[index].toLatin1() ) // evaluate backslashed character
    {
      case 'n':  chr = '\n'; break;
      case 't':  chr = '\t'; break;
      case '\\': chr = '\\'; break;
      case '\'': chr = '\''; break;
      default: chr = '?'; break;
    }
    text[index++] = chr; // set new character and push index +1
  }
  return text;
}

static QString stripColumnRef(QString text)
{
  // strip double quotes on start,end
  text = text.mid( 1, text.length() - 2 );

  // make single "double quotes" from double "double quotes"
  text.replace( "\"\"", "\"" );
  return text;
}

// C locale for correct parsing of numbers even if the system locale is different
static QLocale cLocale("C");


#line 812 "C:/QGIS/QGISBuild/src/core/flex_qgsexpressionlexer.cpp"

#define INITIAL 0
#define BLOCK_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int exp_lex_init (yyscan_t* scanner);

int exp_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int exp_lex_destroy (yyscan_t yyscanner );

int exp_get_debug (yyscan_t yyscanner );

void exp_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE exp_get_extra (yyscan_t yyscanner );

void exp_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *exp_get_in (yyscan_t yyscanner );

void exp_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *exp_get_out (yyscan_t yyscanner );

void exp_set_out  (FILE * _out_str ,yyscan_t yyscanner );

			int exp_get_leng (yyscan_t yyscanner );

char *exp_get_text (yyscan_t yyscanner );

int exp_get_lineno (yyscan_t yyscanner );

void exp_set_lineno (int _line_number ,yyscan_t yyscanner );

int exp_get_column  (yyscan_t yyscanner );

void exp_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * exp_get_lval (yyscan_t yyscanner );

void exp_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int exp_wrap (yyscan_t yyscanner );
#else
extern int exp_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int exp_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int exp_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			exp_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				exp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		exp__load_buffer_state(yyscanner );
		}

	{
#line 124 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"


#line 1089 "C:/QGIS/QGISBuild/src/core/flex_qgsexpressionlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 250 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 249 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 127 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
BEGIN(BLOCK_COMMENT);
	YY_BREAK


case 2:
YY_RULE_SETUP
#line 130 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 131 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
// eat comment in chunks
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 132 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
// eat the lone star
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 133 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
yylineno++;
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 136 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ U_OP(uoNot); return NOT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 137 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boAnd); return AND; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boOr);  return OR;  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boEQ); return EQ; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boNE); return NE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boLE); return LE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boGE); return GE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boNE); return NE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boLT); return LT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boGT); return GT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 148 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boRegexp); return REGEXP; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 149 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boLike); return LIKE; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 150 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boNotLike); return LIKE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 151 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boILike); return LIKE; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 152 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boNotILike); return LIKE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 153 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boIs); return IS; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 154 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boIsNot); return IS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 155 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boConcat); return CONCAT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 157 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boPlus); return PLUS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 158 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boMinus); return MINUS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 159 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boMul); return MUL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 160 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boIntDiv); return INTDIV; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 161 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boDiv); return DIV; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 162 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boMod); return MOD; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 163 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ B_OP(boPow); return POW; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 165 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return IN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 167 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return NULLVALUE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return CASE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return WHEN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return THEN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return ELSE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return END;  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 175 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return COMMA; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 179 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ yylval->numberFloat = cLocale.toDouble( QString::fromLatin1(yytext) ); return NUMBER_FLOAT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 180 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{
	bool ok;
    yylval->numberInt = cLocale.toInt( QString::fromLatin1(yytext), &ok );
	if( ok )
		return NUMBER_INT;

    yylval->numberFloat = cLocale.toDouble( QString::fromLatin1(yytext), &ok );
	if( ok )
		return NUMBER_FLOAT;

	return Unknown_CHARACTER;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 193 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ yylval->boolVal = QString( yytext ).compare( "true", Qt::CaseInsensitive ) == 0; return BOOLEAN; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 195 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ TEXT_FILTER(stripText); return STRING; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 197 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ TEXT; return FUNCTION; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 199 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ TEXT; return SPECIAL_COL; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 201 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ TEXT; return VARIABLE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 203 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ TEXT; return QgsExpression::isFunctionName(*yylval->text) ? FUNCTION : COLUMN_REF; }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 205 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ TEXT_FILTER(stripColumnRef); return COLUMN_REF; }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 207 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
/* skip blanks and tabs */
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 209 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
/* skip line comments */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 211 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
{ return Unknown_CHARACTER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 214 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"
ECHO;
	YY_BREAK
#line 1424 "C:/QGIS/QGISBuild/src/core/flex_qgsexpressionlexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BLOCK_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * exp_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( exp_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of exp_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					exp_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			exp_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) exp_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 250 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 250 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 249);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					exp_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( exp_wrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void exp_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        exp_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            exp__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	exp__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	exp__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void exp__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		exp_pop_buffer_state();
	 *		exp_push_buffer_state(new_buffer);
     */
	exp_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	exp__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (exp_wrap()) processing, but the only time this flag
	 * is looked at is after exp_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void exp__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE exp__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) exp_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in exp__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) exp_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in exp__create_buffer()" );

	b->yy_is_our_buffer = 1;

	exp__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with exp__create_buffer()
 * @param yyscanner The scanner object.
 */
    void exp__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		exp_free((void *) b->yy_ch_buf ,yyscanner );

	exp_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a exp_restart() or at EOF.
 */
    static void exp__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	exp__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then exp__init_buffer was _probably_
     * called from exp_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void exp__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		exp__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void exp_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	exp_ensure_buffer_stack(yyscanner);

	/* This block is copied from exp__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from exp__switch_to_buffer. */
	exp__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void exp_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	exp__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		exp__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void exp_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)exp_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in exp_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)exp_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in exp_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE exp__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) exp_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in exp__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	exp__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to exp_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       exp__scan_bytes() instead.
 */
YY_BUFFER_STATE exp__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return exp__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to exp_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE exp__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) exp_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in exp__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = exp__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in exp__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE exp_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int exp_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int exp_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *exp_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *exp_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int exp_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *exp_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void exp_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void exp_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "exp_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void exp_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "exp_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see exp__switch_to_buffer
 */
void exp_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void exp_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int exp_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void exp_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * exp_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void exp_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* exp_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int exp_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) exp_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* exp_lex_init_extra has the same functionality as exp_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to exp_alloc in
 * the yyextra field.
 */

int exp_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    exp_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) exp_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    exp_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from exp_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * exp_lex_init()
     */
    return 0;
}

/* exp_lex_destroy is for both reentrant and non-reentrant scanners. */
int exp_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		exp__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		exp_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	exp_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        exp_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * exp_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    exp_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *exp_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *exp_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void exp_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see exp_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 214 "E:/02-QtProject/STGIS/STGIS-Core/qgsexpressionlexer.ll"



